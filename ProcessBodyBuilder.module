<?php namespace ProcessWire;


class ProcessBodyBuilder extends Process implements Module
{

    public static function getModuleInfo()
    {
        return array(
            'title' => 'Body Builder Process',
            'summary' => 'The administrative process for Body Builder',
            'version' => 1,
            'requires' => ['InputfieldAceExtended', 'FieldtypeRepeater', 'BodyBuilder'],
            'permission' => 'template-admin',
            'useNavJSON' => true,
        );
    }

    public function init()
    {
        $process = $this->wire('process');
        if ("$process" === "$this") {
            $this->headline($this->moduleInfo['page']['title']);
        }
        return parent::init();
    }


    /**
     * Output JSON list of navigation items for this (intended to for ajax use)
     *
     * @param array $options
     * @return array|string
     *
     * @throws WireException
     */
    public function ___executeNavJSON(array $options = array())
    {
        $pages = $this->wire('pages')->find('template=' . BodyBuilder::codeTemplate);

        $options['items'] = $pages;
        $options['itemLabel'] = 'title';
        $options['edit'] = "edit?id={id}";
        $options['add'] = "edit?id=template";

        return parent::executeNavJSON($options);
    }

    /**
     * Get templates list table
     *
     * @param WireArray|array $templates
     * @return MarkupAdminDataTable
     *
     */
    public function ___getListTable($templates)
    {

        /** @var MarkupAdminDataTable $table */
        $table = $this->wire('modules')->get("MarkupAdminDataTable");
        $table->setEncodeEntities(false);
        $useLabels = false;

        foreach ($templates as $template) {
            $label = $template->getLabel();
            if ($label && $label != $template->name) {
                $useLabels = true;
                break;
            }
        }

        $fieldRootPage = $this->wire('pages')->get('name=field');

        $rows = array();
        foreach ($this->wire('pages')->find('template=' . BodyBuilder::codeTemplate) as $template) {
            $row = $this->getListTableRow($template, $fieldRootPage);
            if (!empty($row)) $rows[] = $row;
        }

        $header = array();
        $header[] = $this->_x('Name', 'list-thead');
        $header[] = $this->_x('Field', 'list-thead');
        $header[] = $this->_x('Modified', 'list-thead');
        $table->headerRow($header);

        foreach ($rows as $row) $table->row($row);

        return $table;
    }

    /**
     * Get row for templates list table
     *
     * @param Page $template
     * @param bool $useLabel
     * @return array
     *
     */
    public function ___getListTableRow(Page $template, Page $fieldRootPage)
    {

        $field = $this->wire('fields')->get(str_replace(BodyBuilder::codePageName, '', $template->name));


        if ($template->useRoles) $flags[] = 'access';
        if ($template->cache_time > 0) $flags[] = 'cache';
        else if ($template->cache_time < 0) $flags[] = 'procache';
        if ($template->urlSegments) $flags[] = 'url-segments';
        if ($template->allowPageNum) $flags[] = 'page-numbers';

        $row = array();
        $row["{$template->title} "] = "edit?id={$template->id}";
        $row["{$field->get('label|name')}"] = "{$fieldRootPage->url}edit?id={$field->id}";


        $mod = $template->modified;
        $row[] = $mod > 0 ? "<span style='display: none;'>$mod </span>" . wireRelativeTimeStr($mod) : '';

        return $row;
    }

    public function ___execute()
    {
        if ($this->wire('config')->ajax) return $this->renderListJSON();

        $out = $this->getListTable($this->wire('templates'))->render();


        $out .= "\n</div><!--/#ProcessTemplateList-->";

        /** @var InputfieldButton $button */
        $button = $this->wire('modules')->get('InputfieldButton');
        $button->href = "edit?id=template";
        $button->value = $this->labels['Add New'];
        $button->icon = 'plus-circle';
        $button->addClass('add_template_button');
        $button->showInHeader();
        $out .= $button->render();


        return $out;
    }

    public function ___executeEdit()
    {
        $name = $this->wire('input')->get('id');
        if ($name === "template") {
            $_GET['id'] = wire('templates')->get(BodyBuilder::codeTemplate)->id;
            $templateProcess = new ProcessTemplate();
            $templateProcess->addHookAfter('buildEditForm', function (HookEvent $hookEvent) {
                $obj = $hookEvent->return;
                $obj->attr('action', '../save/template');
                $hookEvent->return = $obj;
            });
            $templateProcess->init();
            return $templateProcess->___executeEdit();
        } else {
            $processPageEdit = new ProcessPageEdit();
            $processPageEdit->init();

            return $processPageEdit->execute();
        }
        return $name;
    }

    public function ___executeSave()
    {
        $name = $this->wire('input')->urlSegment2;
        if ($name === "edit" && isset($_GET['id'])) {
            $t = $this->templates->get($_GET['id']);
            if ($t instanceof Template && $t->name === BodyBuilder::codeTemplate) {
                $this->session->redirect('../edit/template');
            }
        }
        if ($name === "template") {
            $_GET['id'] = wire('templates')->get(BodyBuilder::codeTemplate)->id;
            $templateProcess = new ProcessTemplate();
            $templateProcess->init();
            return $templateProcess->___executeSave();
        }
    }


}
