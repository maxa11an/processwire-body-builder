<?php namespace ProcessWire;


class ProcessBodyBuilder extends Process implements Module
{

    public static function getModuleInfo()
    {
        return array(
            'title' => 'Body Builder Process',
            'summary' => 'The administrative process for Body Builder',
            'version' => 1,
            'requires' => ['InputfieldAceExtended', 'FieldtypeRepeater', 'BodyBuilder'],
            'permission' => 'template-admin',
            'useNavJSON' => true,
            'autoload' => false
        );
    }

    public function init()
    {
        $process = $this->wire('process');
        if ("$process" === "$this") {
            $this->headline($this->moduleInfo['page']['title']);
        }
        return parent::init();
    }


    /**
     * Output JSON list of navigation items for this (intended to for ajax use)
     *
     * @param array $options
     * @return array|string
     *
     * @throws WireException
     */
    public function ___executeNavJSON(array $options = array())
    {
        $pages = $this->wire('pages')->find('template=' . BodyBuilder::codeTemplate);


        $options['items'] = $pages;
        $options['itemLabel'] = 'title';
        $options['edit'] = "edit?id={id}";
        $options['add'] = "edit?id=template";

        return parent::___executeNavJSON($options);
    }

    /**
     * Get templates list table
     *
     * @param WireArray|array $templates
     * @return MarkupAdminDataTable
     *
     */
    public function ___getListTable($templates)
    {

        /** @var MarkupAdminDataTable $table */
        $table = $this->wire('modules')->get("MarkupAdminDataTable");
        $table->setEncodeEntities(false);
        $useLabels = false;

        foreach ($templates as $template) {
            $label = $template->getLabel();
            if ($label && $label != $template->name) {
                $useLabels = true;
                break;
            }
        }

        $fieldRootPage = $this->wire('pages')->get('name=field');

        $rows = array();
        foreach ($this->wire('pages')->find('template=' . BodyBuilder::codeTemplate) as $template) {
            $row = $this->getListTableRow($template, $fieldRootPage);
            if (!empty($row)) $rows[] = $row;
        }

        $header = array();
        $header[] = $this->_x('Name', 'list-thead');
        $header[] = $this->_x('Field', 'list-thead');
        $header[] = $this->_x('Modified', 'list-thead');
        $table->headerRow($header);

        foreach ($rows as $row) $table->row($row);

        return $table;
    }

    /**
     * Get row for templates list table
     *
     * @param Page $template
     * @param bool $useLabel
     * @return array
     *
     */
    public function ___getListTableRow(Page $template, Page $fieldRootPage)
    {

        $field = $this->wire('fields')->get(str_replace(BodyBuilder::codePageName, '', $template->name));


        if ($template->useRoles) $flags[] = 'access';
        if ($template->cache_time > 0) $flags[] = 'cache';
        else if ($template->cache_time < 0) $flags[] = 'procache';
        if ($template->urlSegments) $flags[] = 'url-segments';
        if ($template->allowPageNum) $flags[] = 'page-numbers';

        $row = array();
        $row["{$template->title} "] = "edit?id={$template->id}";
        $row["{$field->get('label|name')}"] = "{$fieldRootPage->url}edit?id={$field->id}";


        $mod = $template->modified;
        $row[] = $mod > 0 ? "<span style='display: none;'>$mod </span>" . wireRelativeTimeStr($mod) : '';

        return $row;
    }

    public function ___execute()
    {
        if ($this->wire('config')->ajax) return $this->renderListJSON();

        $out = $this->getListTable($this->wire('templates'))->render();


        /** @var InputfieldButton $button */
        $button = $this->wire('modules')->get('InputfieldButton');
        $button->href = "edit?id=template";
        $button->value = $this->labels['Add New'];
        $button->icon = 'plus-circle';
        $button->addClass('add_template_button');
        $button->showInHeader();
        $out .= $button->render();


        return $out;
    }

    public function ___executeEdit()
    {
        $name = $this->wire('input')->get('id');
        if ($name === "template") {
            $_GET['id'] = wire('templates')->get(BodyBuilder::codeTemplate)->id;
            $templateProcess = new ProcessTemplate();
            $templateProcess->addHookAfter('buildEditForm', function (HookEvent $hookEvent) {
                $obj = $hookEvent->return;
                $obj->attr('action', '../save/template');
                $hookEvent->return = $obj;
            });
            $templateProcess->init();
            return $templateProcess->___executeEdit();
        } else {
            $processPageEdit = new ProcessPageEdit();

            $processPageEdit->addHookAfter('buildForm', function (HookEvent $hookEvent) {
                $obj = $hookEvent->return;
                $obj->attr('action', '');
                $hookEvent->return = $obj;
            });

            $processPageEdit->init();

            return $processPageEdit->___execute();
        }
        return $name;
    }

    public function ___executeSave()
    {
        $name = $this->wire('input')->urlSegment2;
        if ($name === "edit" && isset($_GET['id'])) {
            $t = $this->templates->get($_GET['id']);
            if ($t instanceof Template && $t->name === BodyBuilder::codeTemplate) {
                $this->session->redirect('../edit/template');
            }
        }
        if ($name === "template") {
            $_GET['id'] = wire('templates')->get(BodyBuilder::codeTemplate)->id;
            $templateProcess = new ProcessTemplate();
            $templateProcess->init();
            return $templateProcess->___executeSave();
        }else{
            $processPageEdit = new ProcessPageEdit();
            $processPageEdit->init();

            return $processPageEdit->___execute();
        }
    }


    private function exportTemplate(Page $page)
    {
        $rawData = [];
        //We need the code base of the template
        //and all settings provided by fields that it includes
        $page->of(true);
        $rawData['code'] = $page->get(BodyBuilder::codeField);
        $rawData['field'] = $this->_exportField($this->wire('fields')->get(str_replace(BodyBuilder::codePageName, '', $page->name)));

        return $rawData;
    }

    private function _exportField(Field $field)
    {

        $a = array();
        $pages_array = array();
        $templates_array = array();
        $fields_array = array();
        $current_template = array();
        $i = 0;


        // suppressing notices (@) because I removed "array_key_exists($item->template->name, $current_template) && " because it was preventing creation of the same fields again in subsequent templates although I don't know why - seems like it should work
        // if it's a repeater field then need to look through its subfields and add those to array if not already present

        $a = $this->pageToArray($field, BodyBuilder::repeaterName);


        if ($field->type instanceof FieldtypeRepeater) {

        }

        // if it's a page field (and the parent_id is defined) then need to add the selectable pages, templates, and fields to array if not already present
        // the reason we require the parent_id to be set is that it doesn't make sense to migrate a collection of pages from all over a page tree - would be a mess
        // also don't want to export the entire page tree if the page field has Home (ID:1) as the parent of selectable pages
        if ($field->parent_id != "1" && $field->parent_id != "" && $field->parent_id != 0 && ($field->type == "FieldtypePage" || $field->type == "FieldtypePageTable")) {

            if ($field->type == "FieldtypePageTable") {
                $selectablePages = $this->pages->get($field->parent_id)->children("include=all, has_parent!=7");
            } elseif ($field->type == "FieldtypePage") {
                $inputfield = $field->getInputfield($this->page);
                $selectablePages = $inputfield->getSelectablePages($this->page);
            }

            foreach ($selectablePages as $selectablePage) {

                foreach ($selectablePage->fields as $selectablePageField) {

                    $page_selectable_field = $selectablePageField;

                    if ($field->template_id != "") {
                        $pagefield_template = $this->templates->get(is_array($field->template_id) ? $field->template_id[0] : $field->template_id); // PageTable fields template setting is an array, hence the [0]
                    } else {
                        $pagefield_template = $selectablePage->template;
                    }

                    // pagefield parent page
                    if ($this->session->changes_since != '') {
                        $parent_page = $this->pages->get("modified>{$this->session->changes_since}, id={$field->parent_id}, include=all, has_parent!=7");
                    } else {
                        $parent_page = $this->pages->get("id={$field->parent_id}, include=all, has_parent!=7");
                    }
                    if (!in_array($parent_page->name, $pages_array)) { //check to see if this page is not already in the array of pages being exported
                        $a['pages'][] = $this->pageToArray($parent_page, 'pages', null, $i); // this needs to be changed to 1 if we want to set the original parent, but this has problems too - not sure of the best solution for this yet.
                        $pages_array[] = $parent_page->name;
                    }

                    // pagefield child pages
                    if ($this->session->changes_since != '') {
                        $child_pages = $parent_page->children("modified>{$this->session->changes_since}, include=all, has_parent!=7");
                    } else {
                        $child_pages = $parent_page->children("include=all, has_parent!=7");
                    }
                    foreach ($child_pages as $child_page) {
                        if (!in_array($child_page->name, $pages_array)) {
                            $a['pages'][] = $this->pageToArray($child_page, 'pages', null, 1); // 1 is forced to ensure parent_name is not set to blank in pageToArray function - could be anything here but 0
                            $pages_array[] = $child_page->name;
                        }
                    }

                    // pagefield parent and child templates
                    if (!in_array($pagefield_template->name, $templates_array)) {
                        $a['templates'][] = $this->pageToArray($parent_page, 'templates', null, $i);
                        $a['templates'][] = $this->pageToArray($child_page, 'templates', null, $i);
                        $templates_array[] = $pagefield_template->name;
                    }

                    // pagefield parent fields
                    foreach ($parent_page->template->fields as $pagefield_parent_field) {
                        if (!in_array($pagefield_parent_field->name, $fields_array)) {
                            $a['fields'][] = $this->pageToArray($pagefield_parent_field, 'fields', $parent_page->template->name, $i);
                            $fields_array[] = $pagefield_parent_field->name;
                        }
                    }

                    // pagefield child fields
                    if (!in_array($page_selectable_field->name, $fields_array)) {
                        $a['fields'][] = $this->pageToArray($page_selectable_field, 'fields', $pagefield_template->name, $i);
                        $fields_array[] = $page_selectable_field->name;
                    }
                }
            }
        }


        $fields_array[] = $field->name;


        return $a;
    }

    protected function pageToArray($wp, $template_name = null)
    {
        $data = array(

            'name' => $wp->name,
            'label' => $wp->label,
            'description' => $wp->description,
            'template' => $template_name,
            'flags' => $wp->flags,
            'type' => "{$wp->type}",

        );

        foreach ($wp->getArray() as $field => $value) {

            //if(is_array($value) && !empty($value) && $value[0] != 0) { //Last check to hopefully deal with an error when childTemplates or parentTemplates somehow ended up as [0] => 0
            if (is_array($value) && !empty($value) && (array_key_exists(0, $value) && $value[0] != 0)) { //Last check to hopefully deal with an error when childTemplates or parentTemplates somehow ended up as [0] => 0
                $names = array_map(array($this, 'getFieldNameFromID'), $value);
                $data['data'][$field] = $names;
            } else {
                if (strpos($wp->type, 'Language') !== false && strpos($field, 'label') !== false && $field != 'label') { //last check to make sure it ignores any field that might be named exactly 'label'
                    $language_id = preg_replace("/[^0-9]/", "", $field);
                    $data['data']['label_' . $this->languages->get($language_id)->name] = $value;
                } elseif ($field == "parent_id") { // convert page id to name for page field selectable parent
                    $data['data'][$field] = $this->pages->get("id={$value}, include=all, has_parent!=7")->name;
                } elseif ($field == "template_id") { // convert template id to name for page field selectable template
                    $data['data'][$field] = $this->templates->get($value)->name;
                } else {
                    $data['data'][$field] = $value;
                }
            }

            if(isset($data['data']['repeaterFields']) && count($data['data']['repeaterFields']) > 0){
                foreach ($data['data']['repeaterFields'] as $index => $repeaterField) {
                    $repeater_subfield = $this->fields->get($repeaterField);
                    $data['data']['repeaterFields'][$index] = $this->pageToArray($repeater_subfield, null);
                }
                $data['data']['repeaterFields'] = array_values($data['data']['repeaterFields']);
            }

        }




        return $data;
    }
    /**
     * Return field name from its ID
     *
     */
    public function getFieldNameFromID($id){
        if($this->fields->get($id)) return $this->fields->get($id)->name;
    }

    /**
     * Return field ID from its name
     *
     */
    public function getFieldIDFromName($name){
        if($this->fields->get($name)) return $this->fields->get($name)->id;
    }

    /**
     * Return template ID from its name
     *
     */
    public function getTemplateIDFromName($name){
        if($name != '' && $this->templates->get($name)) return $this->templates->get($name)->id;
    }

}
