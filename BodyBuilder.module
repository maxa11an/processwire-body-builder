<?php


namespace ProcessWire;

use Exception;


class BodyBuilder extends WireData implements Module
{
    const moduleName = "process_body_builder";

    const codeField = "process_body_builder_code";
    const codeTemplate = "process_body_builder";
    const codePageName = "for-body-builder-";


    const typeField = "process_body_builder_type";

    const repeaterName = "process_body_builder_repeater";

    const fieldTag = "body-builder";


    public static function getModuleInfo()
    {
        return array(
            'title' => 'Body Builder',
            'summary' => 'A builder for a more adjustable yet clear outputting of body elements',
            'version' => 1,
            'requires' => ['InputfieldAceExtended', 'FieldtypeRepeater'],
            'installs' => ['InputfieldAceExtended', 'FieldtypeRepeater', 'ProcessBodyBuilder', 'MarkupBodyBuilder'],
            'permission' => 'template-admin',
            'autoload' => false,
        );
    }


    public function ___install()
    {
        try {
            $adminPage = $this->wire('pages')->get($this->config->adminRootPageID);
            $setupPage = $adminPage->child("name=setup");
            $p = new Page();
            $p->template = $this->templates->get("admin");
            $p->name = self::moduleName;
            $p->parent = $setupPage;
            $p->process = $this;
            $p->title = 'Body Builder Templates';
            $p->save();


            $typeField = new Field();
            $typeField->type = new FieldtypePage();
            $typeField->name = self::typeField;
            $typeField->label = _("Content type");
            $typeField->labelFieldName = "title";
            $typeField->derefAsPage = 1;
            $typeField->inputfield = "InputfieldSelect";
            $typeField->parent_id = $p->id;
            $typeField->addFlag(Field::flagSystem);
            $typeField->save();

            $this->_createRepeater(self::repeaterName, self::typeField, "Body Builder", self::fieldTag);

            $field = new Field();
            $field->type = $this->modules->get("FieldtypeTextarea");
            $field->inputfieldClass = 'InputfieldAceExtended';
            $field->mode = ["twig"];
            $field->modes = ["php", "html", "twig", "css", "javascript"];
            $field->rows = 40;
            $field->label = "Code";
            $field->name = self::codeField;
            $field->collapsed = Inputfield::collapsedNever;
            $field->save();


            $fieldGroup = new Fieldgroup();
            $fieldGroup->name = self::codeTemplate;
            $fieldGroup->add($this->wire('fields')->get('title'));
            $fieldGroup->add($field);

            $fieldGroup->save();


            //Add a corresponding connection to a field one-to-one
            $template = $this->wire('templates')->get(self::codeTemplate);

            if (!$template) {
                $template = new Template();
                $template->name = self::codeTemplate;
                $template->flags = Template::flagSystem;
                $template->parentTemplates(array('admin', self::codeTemplate));
                $template->noMove = 1;
                $template->noChangeTemplate = 1;
                $template->label = "Body Builder Templates";
                $template->fieldgroup = $fieldGroup;
                $template->save();
                $template->childTemplates(array(self::codeTemplate));
                $template->save();
            }
        } catch (Exception $e) {
            $this->uninstall();
            $this->install();
            throw $e;
        }
    }

    private function _createRepeater($repeaterName, $repeaterFields, $repeaterLabel, $repeaterTags)
    {
        $fieldsArray = explode(' ', $repeaterFields);

        $f = new Field();
        $f->type = $this->modules->get("FieldtypeRepeater");
        $f->name = $repeaterName;
        $f->label = $repeaterLabel;
        $f->tags = $repeaterTags;
        $f->repeaterReadyItems = 3;

        //Create fieldgroup
        $repeaterFg = new Fieldgroup();
        $repeaterFg->name = "repeater_$repeaterName";

        //Add fields to fieldgroup
        foreach ($fieldsArray as $field) {
            $repeaterFg->append($this->fields->get($field));
        }

        $repeaterFg->save();

        //Create template
        $repeaterT = new Template();
        $repeaterT->name = "repeater_$repeaterName";
        $repeaterT->flags = 8;
        $repeaterT->noChildren = 1;
        $repeaterT->noParents = 1;
        $repeaterT->noGlobal = 1;
        $repeaterT->slashUrls = 1;
        $repeaterT->fieldgroup = $repeaterFg;

        $repeaterT->save();

        //Setup page for the repeater - Very important
        $repeaterPage = "for-field-{$f->id}";
        $f->parent_id = $this->pages->get("name=$repeaterPage")->id;
        $f->template_id = $repeaterT->id;
        $f->repeaterReadyItems = 3;

        //Now, add the fields directly to the repeater field
        foreach ($fieldsArray as $field) {
            $f->repeaterFields = $this->fields->get($field);
        }

        $f->save();

        return $f;
    }

    public function ___uninstall()
    {
        $field = $this->fields->get(self::typeField);
        if ($field) {
            $field->flags = Field::flagSystemOverride;
            $field->flags = 0;
            $fieldgroup = $this->templates->get('repeater_' . self::repeaterName)->fieldgroup;
            if ($fieldgroup) {
                $fieldgroup->remove($field);
                $fieldgroup->save();
                $this->message("Removed type field from repeater template");
            }
            $this->fields->delete($field);
            $this->message("Removing field: $field");
        }

        $field = $this->fields->get(self::repeaterName);
        if ($field) {
            $field->flags = Field::flagSystemOverride;
            $field->flags = 0;
            $this->fields->delete($field);
            $this->message("Removing field: $field");
        }

        $field = $this->fields->get(self::codeField);
        if ($field) {
            $field->flags = Field::flagSystemOverride;
            $field->flags = 0;
            $fieldgroup = $this->templates->get(self::codeTemplate)->fieldgroup;

            if ($fieldgroup) {
                $fieldgroup->remove($field);
                $fieldgroup->save();
                $this->message("Removed code field from code Template");
            }
            $this->fields->delete($field);
            $this->message("Removing field: $field");
        }

        $pages = $this->pages->find('include=all,name=' . self::moduleName);
        foreach ($pages as $page) {
            $this->message("Removing template page and its children: {$page->path}");
            $this->pages->delete($page, true);
        }

        $template = $this->templates->get(self::codeTemplate);
        if ($template) {
            $template->flags = Template::flagSystemOverride;
            $template->flags = 0;

            $this->message("Removing template: {$template->name}");
            $this->templates->delete($template);
        }

        $fieldgroup = $this->fieldgroups->get(self::codeTemplate);
        if ($fieldgroup) {
            $this->message("Removing fieldgroup: {$fieldgroup}");
            $this->fieldgroups->delete($fieldgroup);
        }


    }
}