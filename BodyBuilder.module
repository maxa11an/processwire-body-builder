<?php


namespace ProcessWire;

include_once "MarkupBodyBuilder.module";
include_once "ProcessBodyBuilder.module";

class BodyBuilder extends WireData implements Module
{
    const modularName = "process_body_builder";
    static $moduleFields = array(
        "process_body_builder_code",
        "process_body_builder_type",
        "process_body_builder"
    );
    static $moduleTemplates = array(
        "process_body_builder",
        "repeater_process_body_builder"
    );
    public static function getModuleInfo()
    {
        return array(
            'title' => 'Body Builder',
            'summary' => 'A builder for a more adjustable yet clear outputting of body elements',
            'version' => 1,
            'requires' => ['InputfieldAceExtended', 'FieldtypeRepeater', 'ProcessBodyBuilder', 'MarkupBodyBuilder'],
            'installs' => ['InputfieldAceExtended', 'FieldtypeRepeater', 'ProcessBodyBuilder', 'MarkupBodyBuilder'],
            'permission' => 'template-admin',
            'autoload' => false,
        );
    }


    public function ___install()
    {
        try {
            $adminPage = $this->wire('pages')->get($this->config->adminRootPageID);
            $setupPage = $adminPage->child("name=setup");
            $p = new Page();
            $p->template = $this->templates->get("admin");
            $p->name = self::modularName;
            $p->parent = $setupPage;
            $p->process = $this;
            $p->title = 'Body Builder Templates';
            $p->save();



            $typeField = new Field();
            $typeField->type = new FieldtypePage();
            $typeField->name = self::modularName . '_type';
            $typeField->label = _("Content type");
            $typeField->labelFieldName = "title";
            $typeField->derefAsPage = 1;
            $typeField->inputfield = "InputfieldSelect";
            $typeField->parent_id = $p->id;
            $typeField->addFlag(Field::flagSystem);
            $typeField->save();

            $this->_createRepeater(self::modularName, self::modularName . '_type', "Body Builder", self::modularName);

            $field = new Field();
            $field->type = $this->modules->get("FieldtypeTextarea");
            $field->inputfieldClass = 'InputfieldAceExtended';
            $field->mode = ["twig"];
            $field->modes = ["php", "html", "twig", "css", "javascript"];
            $field->rows = 40;
            $field->label = "Code";
            $field->name = self::modularName . "_code";
            $field->collapsed = Inputfield::collapsedNever;
            $field->save();


            $fieldGroup = new Fieldgroup();
            $fieldGroup->name = self::modularName;
            $fieldGroup->add($this->wire('fields')->get('title'));
            $fieldGroup->add($field);

            $fieldGroup->save();


            //Add a corresponding connection to a field one-to-one
            $template = $this->wire('templates')->get('name=' . self::modularName);

            if (!is_null($template)) {
                $template = new Template();
                $template->name = self::modularName;
                $template->flags = Template::flagSystem;
                $template->parentTemplates(array('admin', self::modularName));
                $template->noMove = 1;
                $template->noChangeTemplate = 1;
                $template->label = "Body Builder Templates";
                $template->fieldgroup = $fieldGroup;
                $template->save();
                $template->childTemplates(array(self::modularName));
                $template->save();
            }
        } catch (\Exception $e) {
            $this->uninstall();
            throw $e;
        }


    }

    public function ___uninstall()
    {

        $page = $this->wire('pages')->get("name=" . self::modularName . ",parent=" . $this->pages->get($this->config->adminRootPageID)->child('name=setup'));
        if (!($page instanceof NullPage)) {
            $this->wire('pages')->delete($page, true);
        }

        $pagesToDelete = $this->wire('pages')->find("name=repeater_" . self::modularName);
        foreach ($pagesToDelete as $page) {
            if (!($page instanceof NullPage)) {
                $this->wire('pages')->delete($page, true);
            }
        }

        foreach (self::$moduleTemplates as $templateName) {
            $template = $this->wire('templates')->get($templateName);
            if (@$template->id) {
                $template->flags = Template::flagSystemOverride;
                $template->flags = 0;
                $template->save();

                foreach ($template->fieldgroup as $field) {
                    /** @var Field $field */
                    $field->flags = Field::flagSystemOverride;
                    $field->flags = 0;
                    $field->save();
                    $template->fieldgroup->remove($field);
                    $template->fieldgroup->save();
                    if (strpos($field->name, self::modularName) !== false) {
                        $this->wire('fields')->delete($field);
                    }
                }
                $p = $this->pages->get("template=$template");
                if (!($p instanceof NullPage)) {
                    $p->delete(true);
                }
                $this->wire('templates')->delete($template);
                $this->wire('fieldgroups')->delete($template->fieldgroup);
            }
        }

        foreach (self::$moduleFields as $fieldNames) {
            if ($field = $this->wire('fields')->get($fieldNames))
                if ($field instanceof Field)
                    $this->wire('fields')->delete($field);

        }
    }

    private function _createRepeater($repeaterName, $repeaterFields, $repeaterLabel, $repeaterTags)
    {
        $fieldsArray = explode(' ', $repeaterFields);

        $f = new Field();
        $f->type = $this->modules->get("FieldtypeRepeater");
        $f->name = $repeaterName;
        $f->label = $repeaterLabel;
        $f->tags = $repeaterTags;
        $f->repeaterReadyItems = 3;

        //Create fieldgroup
        $repeaterFg = new Fieldgroup();
        $repeaterFg->name = "repeater_$repeaterName";

        //Add fields to fieldgroup
        foreach ($fieldsArray as $field) {
            $repeaterFg->append($this->fields->get($field));
        }

        $repeaterFg->save();

        //Create template
        $repeaterT = new Template();
        $repeaterT->name = "repeater_$repeaterName";
        $repeaterT->flags = 8;
        $repeaterT->noChildren = 1;
        $repeaterT->noParents = 1;
        $repeaterT->noGlobal = 1;
        $repeaterT->slashUrls = 1;
        $repeaterT->fieldgroup = $repeaterFg;

        $repeaterT->save();

        //Setup page for the repeater - Very important
        $repeaterPage = "for-field-{$f->id}";
        $f->parent_id = $this->pages->get("name=$repeaterPage")->id;
        $f->template_id = $repeaterT->id;
        $f->repeaterReadyItems = 3;

        //Now, add the fields directly to the repeater field
        foreach ($fieldsArray as $field) {
            $f->repeaterFields = $this->fields->get($field);
        }

        $f->save();

        return $f;
    }
}